R Skripte
FileName: plot_weather_data
library(lubridate)
library(ggplot2)
library(dplyr)
library(tidyr)

##Plot der Lufttemperatur mit Variabilität
#Plot Heatmap für Temperatur

ggplot(temperature_variability, aes(x = Jahr, y = Station, fill = SD)) +
  geom_tile(color = "white") +
  scale_fill_viridis_c(name = "SD (°C)", option = "C") +
  labs(
    title = "Heatmap: Variabilität der Tagesmitteltemperatur (TMK)",
    subtitle = "Standardabweichung je Station und Jahr (2015–2025)",
    x = "Jahr",
    y = "Station"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "right",
    panel.grid = element_blank()
  )

#Plot der Standardabweichung der Temperaturvariabilität
ggplot(tukey_df, aes(x = diff, y = reorder(Comparison, diff), color = Significant)) +
  geom_point(size = 3) +
  geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.3) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey40") +
  scale_color_manual(values = c("Ja" = "firebrick", "Nein" = "steelblue")) +
  labs(
    title = "TukeyHSD: Paarweise Vergleiche der Temperaturvariabilität (TMK)",
    subtitle = "Vergleich der Standardabweichung (SD) zwischen den Stationen",
    x = "Differenz der mittleren SD",
    y = "Stationsvergleich",
    color = "Signifikant (p < 0.05)"
  ) +
  theme_minimal(base_size = 14)

#Plot der Standardabweichung der Relativen Feuchte
ggplot(tukey_rfk_df, aes(x = diff, y = reorder(Comparison, diff), color = Significant)) +
  geom_point(size = 3) +
  geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.3) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey40") +
  scale_color_manual(values = c("Ja" = "firebrick", "Nein" = "steelblue")) +
  labs(
    title = "TukeyHSD: Paarweise Vergleiche der Feuchtevariabilität (UPM)",
    subtitle = "Vergleich der Standardabweichung (SD) zwischen den Stationen",
    x = "Differenz der mittleren SD",
    y = "Stationsvergleich",
    color = "Signifikant (p < 0.05)"
  ) +
  theme_minimal(base_size = 14)

#Plot der Standardabweichung der Windgeschwindigkeit
ggplot(tukey_fg_df, aes(x = diff, y = reorder(Comparison, diff), color = Significant)) +
  geom_point(size = 3) +
  geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.3) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey40") +
  scale_color_manual(values = c("Ja" = "firebrick", "Nein" = "steelblue")) +
  labs(
    title = "TukeyHSD: Paarweise Vergleiche der Windvariabilität (FM)",
    subtitle = "Vergleich der Standardabweichung (SD) zwischen den Stationen",
    x = "Differenz der mittleren SD",
    y = "Stationsvergleich",
    color = "Signifikant (p < 0.05)"
  ) +
  theme_minimal(base_size = 14)
FileName: stationen_import
#Paket laden
library(rdwd)

stations <- read.fwf(
  file = "data/stationsübersicht.txt",
  skip = 2,  # <-- Überspringt Header und Trennzeile
  widths = c(6, 9, 9, 14, 12, 10, 41, 23),
  col.names = c("Stations_ID", "von_datum", "bis_datum", "Stationshoehe",
                "geoBreite", "geoLaenge", "Stationsname", "Bundesland"),
  fileEncoding = "latin1",
  stringsAsFactors = FALSE,
  strip.white = TRUE
)
FileName: plot_selected_stations
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)

stations_final <- data.frame(
  Station = c(
    "Cuxhaven", "Greifswald", "Berleburg, Bad-Stünzel", "Schmücke", "Konstanz",
    "Garmisch-Partenkirchen", "Großer Arber", "Schneifelforsthaus", "Stötten", "Brocken"
  ),
  lat = c(
    53.8713,     # Cuxhaven
    54.0967,     # Greifswald
    50.9837,     # Berleburg, Bad-Stünzel
    50.6545,     # Schmücke
    47.6952,     # Konstanz
    47.4830,     # Garmisch-Partenkirchen
    49.1129,     # Großer Arber
    50.2968,     # Schneifelforsthaus
    48.6656,     # Stötten
    51.7990      # Brocken
  ),
  lon = c(
    8.7060,      # Cuxhaven
    13.4056,     # Greifswald
    8.3683,      # Berleburg, Bad-Stünzel
    10.7696,     # Schmücke
    9.1307,      # Konstanz
    11.0621,     # Garmisch-Partenkirchen
    13.1338,     # Großer Arber
    6.4194,      # Schneifelforsthaus
    9.8648,      # Stötten
    10.6183      # Brocken
  )
)

deutschland <- ne_countries(country = "Germany", returnclass = "sf")

stations_sf <- st_as_sf(stations_final, coords = c("lon", "lat"), crs = 4326)

ggplot() +
  geom_sf(data = deutschland, fill = "gray90", color = "black") +
  geom_sf(data = stations_sf, color = "red", size = 3) +
  geom_sf_text(data = stations_sf, aes(label = Station), size = 3, nudge_y = 0.3) +
  coord_sf(xlim = c(5, 15.5), ylim = c(47, 55.5), expand = FALSE) +
  theme_minimal() +
  labs(title = "Ausgewählte 10 DWD-Stationen für die Fallstudie",
       subtitle = "Küsten-, Seen- und Mittelgebirgslagen in Deutschland",
       x = "Längengrad", y = "Breitengrad")

FileName: filter_water_stations
library(sf)
library(dplyr)
library(rnaturalearth)
library(rnaturalearthdata)

stations_sf <- stations %>%
  mutate(
    lon = as.numeric(geoLaenge),
    lat = as.numeric(geoBreite)
  ) %>%
  filter(!is.na(lon), !is.na(lat)) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)

# Weltweite Küstenlinie (hohe Auflösung optional: scale = "large")
coastline <- ne_download(scale = "medium", type = "coastline", category = "physical", returnclass = "sf")

# Große Seen
seen <- ne_download(scale = "medium", type = "lakes", category = "physical", returnclass = "sf")

# Optional: Deutschlandgrenzen (zur Eingrenzung)
deutschland <- ne_countries(country = "Germany", returnclass = "sf")

# Projektieren in ein metrisches Koordinatensystem (Meter statt Grad)
stations_m <- st_transform(stations_sf, crs = 3857)
coastline_m <- st_transform(coastline, crs = 3857)
seen_m <- st_transform(seen, crs = 3857)

# Buffer-Zonen um Wasserflächen (z. B. 20 km)
wasser_zone <- st_union(
  st_buffer(coastline_m, dist = 20000),
  st_buffer(seen_m, dist = 20000)
)

# Nur Stationen, die innerhalb dieser Zone liegen
stations_nahe_wasser <- stations_m[st_intersects(stations_m, wasser_zone, sparse = FALSE), ]
View(stations_nahe_wasser)
nrow(stations_nahe_wasser)
FileName: filter_stations
library(dplyr)
stations_filtered <- stations

stations_filtered <- stations_filtered %>%
  filter(stations_filtered$Stationshoehe >= 600)

stations_filtered <- stations_filtered %>%
  filter(
    !grepl("Berlin|Hamburg|München|Frankfurt|Köln|Stuttgart|Düsseldorf|Leipzig|Essen|Zugspitze", Stationsname)
  )

wasserorte <- c("Konstanz", "Starnberg", "Norderney", "List", "Emden", 
                "Kiel", "Greifswald", "Lübeck", "Cuxhaven", "Plön", "Waren", "Schwerin")

stations_wasser <- stations %>%
  filter(grepl(paste(wasserorte, collapse = "|"), Stationsname, ignore.case = TRUE))

stations_kombiniert <- bind_rows(stations_filtered, stations_wasser) %>%
  distinct(Stations_ID, .keep_all = TRUE)

stations_kombiniert <- stations_kombiniert %>%
  mutate(
    datum_char = as.character(stations_kombiniert$bis_datum),
    bis_datum = as.numeric(substr(datum_char, 1, 4))
  )

stations_kombiniert <- stations_kombiniert %>%
  mutate(
    datum_char = as.character(stations_kombiniert$von_datum),
    von_datum = as.numeric(substr(datum_char, 1, 4))
  )

stations_kombiniert <- stations_kombiniert %>%
  filter(stations_kombiniert$bis_datum == 2025)

stations_sf <- st_as_sf(
  stations_kombiniert,
  coords = c("geoLaenge", "geoBreite"),
  crs = 4326
)

ggplot() +
  geom_sf(data = deutschland, fill = "gray95", color = "black") +
  geom_sf(data = stations_sf, color = "red", size = 2) +
  geom_sf_text(data = stations_sf, aes(label = Stationsname), size = 3, nudge_y = 0.1) +
  coord_sf(xlim = c(5, 15.5), ylim = c(47, 55.5), expand = FALSE) +
  theme_minimal() +
  labs(
    title = "Gefilterte DWD-Stationen auf der Deutschlandkarte",
    subtitle = "Für Fallstudie: Ideale Wohnortwahl bei stabiler Wetterlage",
    x = "Längengrad",
    y = "Breitengrad"
  )

#rm(list = ls())
FileName: download_weather_data
library(rdwd)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)

stations_final_ids <- stations_final %>%
  left_join(
    stations %>%
      select(Stationsname, Stations_ID),
    by = c("Station" = "Stationsname")
  ) %>%
  rename(Stations_ID = Stations_ID.x) %>%
  select(Station, Stations_ID, lat, lon)

# update to the most recent fileIndex (ca monthly):
rdwd::updateRdwd() 
# Load the package into library (needed in every R session):

ids <- stations_final_ids$Stations_ID

library(rdwd)
links_hist <- selectDWD(
  id = ids,
  res = "daily",
  var = "kl",
  per = "historical"
)

# Recent Links
links_rec <- selectDWD(
  id = ids,
  res = "daily",
  var = "kl",
  per = "recent"
)

# Links kombinieren
links_all <- c(links_hist, links_rec)

#Files Herunterladen
files_all <- dataDWD(links_all, read = FALSE)

#Einlesen und kombinieren
dat_list_all <- lapply(files_all, readDWD, varnames = TRUE)

# Kombiniere alle Stationen und Zeiträume in einem DataFrame:
all_data <- bind_rows(dat_list_all)

#Filter auf die letzten 10 Jahre:
library(lubridate)
all_data$date <- ymd(all_data$MESS_DATUM)

all_data_10 <- all_data %>%
  filter(date >= as.Date("2015-01-01") & date <= as.Date("2025-12-31"))
 FileName: analyze_varianz
 library(tidyverse)
#Zeitraum der letzten zehn Jahre auswählen
all_data$date <- ymd(all_data$MESS_DATUM)
all_data_10 <- all_data %>%
  filter(date >= as.Date("2015-01-01") & date <= as.Date("2025-12-31"))

#selected_station_id <- ids[1] # ID der Station auswählen
#station_data <- all_data_10 %>%
#  filter(STATIONS_ID == selected_station_id)

#stationsname <- stations_final_ids$Station[stations_final_ids$Stations_ID == selected_station_id]

all_data_10 <- all_data_10 %>%
  mutate(STATIONS_ID = as.character(STATIONS_ID)) %>%
  left_join(
    stations_final_ids %>% mutate(Stations_ID = as.character(Stations_ID)),
    by = c("STATIONS_ID" = "Stations_ID")
  )

long_data <- all_data_10 %>%
  pivot_longer(
    cols = c(TMK.Lufttemperatur, UPM.Relative_Feuchte, FM.Windgeschwindigkeit),
    names_to = "Parameter",
    values_to = "Wert"
  )

#Variabilität berechnen
variability_summary <- long_data %>%
  mutate(Jahr = year(date)) %>%
  group_by(Station, Parameter, Jahr) %>%
  summarise(
    Mittelwert = mean(Wert, na.rm = TRUE),
    SD = sd(Wert, na.rm = TRUE),
    .groups = "drop"
  )

##Berechnung der Variabilität der Temperatur
temperature_variability <- variability_summary %>%
  filter(Parameter == "TMK.Lufttemperatur")

#ANOVA Test
anova_result_Temp <- aov(SD ~ Station, data = temperature_variability)
summary(anova_result_Temp)

#TukeyHSD-Analyse
tukey_result_Temp <- TukeyHSD(anova_result_Temp)
tukey_df <- as.data.frame(tukey_result_Temp$Station)
tukey_df$Comparison <- rownames(tukey_df)
rownames(tukey_df) <- NULL
tukey_df <- tukey_df %>%
  mutate(Significant = ifelse(`p adj` < 0.05, "Ja", "Nein"))

##Berechnung der Variabilität der Relativen Luftfeuchtigkeit
rfk_variability <- variability_summary %>%
  filter(Parameter == "UPM.Relative_Feuchte")

#ANOVA Test
anova_rfk <- aov(SD ~ Station, data = rfk_variability)
summary(anova_rfk)

#TukeyHSD-Analyse
tukey_rfk <- TukeyHSD(anova_rfk)
tukey_rfk_df <- as.data.frame(tukey_rfk$Station)
tukey_rfk_df$Comparison <- rownames(tukey_rfk_df)
rownames(tukey_rfk_df) <- NULL

tukey_rfk_df <- tukey_rfk_df %>%
  mutate(Significant = ifelse(`p adj` < 0.05, "Ja", "Nein"))

##Berechnung der Variabilität der Windgeschwindigkeit
fg_variability <- variability_summary %>%
  filter(Parameter == "FM.Windgeschwindigkeit")

#ANOVA Test
anova_fg <- aov(SD ~ Station, data = fg_variability)
summary(anova_fg)

#TukeyHSD-Analyse
tukey_fg <- TukeyHSD(anova_fg)
tukey_fg_df <- as.data.frame(tukey_fg$Station)
tukey_fg_df$Comparison <- rownames(tukey_fg_df)
rownames(tukey_fg_df) <- NULL

tukey_fg_df <- tukey_fg_df %>%
  mutate(Significant = ifelse(`p adj` < 0.05, "Ja", "Nein"))


